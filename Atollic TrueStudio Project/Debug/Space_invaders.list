
Space_invaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001cd0  08001cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d50  08001d50  00011d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d54  08001d54  00011d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08001d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          0000009c  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000c4  200000c4  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006349  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001520  00000000  00000000  000263a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000880  00000000  00000000  000278c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000798  00000000  00000000  00028148  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002fa8  00000000  00000000  000288e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000029a1  00000000  00000000  0002b888  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002e229  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000223c  00000000  00000000  0002e2a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001cb8 	.word	0x08001cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08001cb8 	.word	0x08001cb8

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <DAC_SetChannel1Data+0x34>)
 800029e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	3308      	adds	r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	461a      	mov	r2, r3
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40007400 	.word	0x40007400

080002c4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <DMA_Init+0xac>)
 80002dc:	4013      	ands	r3, r2
 80002de:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000306:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000312:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000318:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 0307 	bic.w	r3, r3, #7
 8000332:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4313      	orrs	r3, r2
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	691a      	ldr	r2, [r3, #16]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	f01c803f 	.word	0xf01c803f

08000374 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f043 0201 	orr.w	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000392:	e005      	b.n	80003a0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f023 0201 	bic.w	r2, r3, #1
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e001      	b.n	80003ce <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a15      	ldr	r2, [pc, #84]	; (8000448 <DMA_GetFlagStatus+0x6c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d802      	bhi.n	80003fc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <DMA_GetFlagStatus+0x70>)
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <DMA_GetFlagStatus+0x74>)
 80003fe:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	e002      	b.n	8000418 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800041e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000422:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	4013      	ands	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800042e:	2301      	movs	r3, #1
 8000430:	75fb      	strb	r3, [r7, #23]
 8000432:	e001      	b.n	8000438 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000438:	7dfb      	ldrb	r3, [r7, #23]
}
 800043a:	4618      	mov	r0, r3
 800043c:	371c      	adds	r7, #28
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	4002640f 	.word	0x4002640f
 800044c:	40026000 	.word	0x40026000
 8000450:	40026400 	.word	0x40026400

08000454 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <DMA_ClearFlag+0x50>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d802      	bhi.n	800046c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <DMA_ClearFlag+0x54>)
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e001      	b.n	8000470 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <DMA_ClearFlag+0x58>)
 800046e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d007      	beq.n	800048a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000480:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000488:	e006      	b.n	8000498 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000490:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	6093      	str	r3, [r2, #8]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	4002640f 	.word	0x4002640f
 80004a8:	40026000 	.word	0x40026000
 80004ac:	40026400 	.word	0x40026400

080004b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e076      	b.n	80005ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004cc:	2201      	movs	r2, #1
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d165      	bne.n	80005b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	401a      	ands	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	4619      	mov	r1, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d003      	beq.n	8000526 <GPIO_Init+0x76>
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d12e      	bne.n	8000584 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	4619      	mov	r1, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	b29b      	uxth	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7992      	ldrb	r2, [r2, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	b292      	uxth	r2, r2
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	b292      	uxth	r2, r2
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	b29b      	uxth	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d985      	bls.n	80004cc <GPIO_Init+0x1c>
    }
  }
}
 80005c0:	bf00      	nop
 80005c2:	371c      	adds	r7, #28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
 80005d8:	4613      	mov	r3, r2
 80005da:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005e4:	787a      	ldrb	r2, [r7, #1]
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	b29b      	uxth	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3208      	adds	r2, #8
 8000608:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	210f      	movs	r1, #15
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43db      	mvns	r3, r3
 800061c:	ea02 0103 	and.w	r1, r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f100 0208 	add.w	r2, r0, #8
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	b29b      	uxth	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3208      	adds	r2, #8
 8000636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4313      	orrs	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000640:	887b      	ldrh	r3, [r7, #2]
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	b29b      	uxth	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3208      	adds	r2, #8
 800064c:	68b9      	ldr	r1, [r7, #8]
 800064e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000660:	b480      	push	{r7}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	2302      	movs	r3, #2
 800067e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000680:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f003 030c 	and.w	r3, r3, #12
 8000688:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d007      	beq.n	80006a0 <RCC_GetClocksFreq+0x40>
 8000690:	2b08      	cmp	r3, #8
 8000692:	d009      	beq.n	80006a8 <RCC_GetClocksFreq+0x48>
 8000694:	2b00      	cmp	r3, #0
 8000696:	d13d      	bne.n	8000714 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a42      	ldr	r2, [pc, #264]	; (80007a4 <RCC_GetClocksFreq+0x144>)
 800069c:	601a      	str	r2, [r3, #0]
      break;
 800069e:	e03d      	b.n	800071c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a41      	ldr	r2, [pc, #260]	; (80007a8 <RCC_GetClocksFreq+0x148>)
 80006a4:	601a      	str	r2, [r3, #0]
      break;
 80006a6:	e039      	b.n	800071c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006a8:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	0d9b      	lsrs	r3, r3, #22
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006b4:	4b3a      	ldr	r3, [pc, #232]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006bc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00c      	beq.n	80006de <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006c4:	4a38      	ldr	r2, [pc, #224]	; (80007a8 <RCC_GetClocksFreq+0x148>)
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	4a34      	ldr	r2, [pc, #208]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006ce:	6852      	ldr	r2, [r2, #4]
 80006d0:	0992      	lsrs	r2, r2, #6
 80006d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	e00b      	b.n	80006f6 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <RCC_GetClocksFreq+0x144>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006e8:	6852      	ldr	r2, [r2, #4]
 80006ea:	0992      	lsrs	r2, r2, #6
 80006ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006f0:	fb02 f303 	mul.w	r3, r2, r3
 80006f4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	0c1b      	lsrs	r3, r3, #16
 80006fc:	f003 0303 	and.w	r3, r3, #3
 8000700:	3301      	adds	r3, #1
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	fbb2 f2f3 	udiv	r2, r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
      break;
 8000712:	e003      	b.n	800071c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <RCC_GetClocksFreq+0x144>)
 8000718:	601a      	str	r2, [r3, #0]
      break;
 800071a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000724:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	091b      	lsrs	r3, r3, #4
 800072a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800072c:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <RCC_GetClocksFreq+0x14c>)
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	40da      	lsrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800074c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	0a9b      	lsrs	r3, r3, #10
 8000752:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000754:	4a15      	ldr	r2, [pc, #84]	; (80007ac <RCC_GetClocksFreq+0x14c>)
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	40da      	lsrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000774:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	0b5b      	lsrs	r3, r3, #13
 800077a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800077c:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <RCC_GetClocksFreq+0x14c>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	40da      	lsrs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	60da      	str	r2, [r3, #12]
}
 8000794:	bf00      	nop
 8000796:	3724      	adds	r7, #36	; 0x24
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40023800 	.word	0x40023800
 80007a4:	00f42400 	.word	0x00f42400
 80007a8:	007a1200 	.word	0x007a1200
 80007ac:	20000000 	.word	0x20000000

080007b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d006      	beq.n	80007d0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007c2:	490a      	ldr	r1, [pc, #40]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007ce:	e006      	b.n	80007de <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	43db      	mvns	r3, r3
 80007da:	4013      	ands	r3, r2
 80007dc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000802:	490a      	ldr	r1, [pc, #40]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800080e:	e006      	b.n	800081e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	43db      	mvns	r3, r3
 800081a:	4013      	ands	r3, r2
 800081c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	887a      	ldrh	r2, [r7, #2]
 8000840:	819a      	strh	r2, [r3, #12]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	460b      	mov	r3, r1
 8000858:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	891b      	ldrh	r3, [r3, #8]
 8000862:	b29a      	uxth	r2, r3
 8000864:	887b      	ldrh	r3, [r7, #2]
 8000866:	4013      	ands	r3, r2
 8000868:	b29b      	uxth	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e001      	b.n	8000878 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	8a1b      	ldrh	r3, [r3, #16]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	88db      	ldrh	r3, [r3, #6]
 80008b6:	461a      	mov	r2, r3
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	4313      	orrs	r3, r2
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	899b      	ldrh	r3, [r3, #12]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80008d4:	f023 030c 	bic.w	r3, r3, #12
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	889a      	ldrh	r2, [r3, #4]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	891b      	ldrh	r3, [r3, #8]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	4313      	orrs	r3, r2
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	8a9b      	ldrh	r3, [r3, #20]
 8000902:	b29b      	uxth	r3, r3
 8000904:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800090c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	899b      	ldrh	r3, [r3, #12]
 8000912:	461a      	mov	r2, r3
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	4313      	orrs	r3, r2
 8000918:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	b29a      	uxth	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe9a 	bl	8000660 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a30      	ldr	r2, [pc, #192]	; (80009f0 <USART_Init+0x168>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d003      	beq.n	800093c <USART_Init+0xb4>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <USART_Init+0x16c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d102      	bne.n	8000942 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	e001      	b.n	8000946 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	899b      	ldrh	r3, [r3, #12]
 800094a:	b29b      	uxth	r3, r3
 800094c:	b21b      	sxth	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	da0c      	bge.n	800096c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000952:	6a3a      	ldr	r2, [r7, #32]
 8000954:	4613      	mov	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	009a      	lsls	r2, r3, #2
 800095c:	441a      	add	r2, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fbb2 f3f3 	udiv	r3, r2, r3
 8000968:	61fb      	str	r3, [r7, #28]
 800096a:	e00b      	b.n	8000984 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800096c:	6a3a      	ldr	r2, [r7, #32]
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	009a      	lsls	r2, r3, #2
 8000976:	441a      	add	r2, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <USART_Init+0x170>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	095b      	lsrs	r3, r3, #5
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	2264      	movs	r2, #100	; 0x64
 8000998:	fb02 f303 	mul.w	r3, r2, r3
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	899b      	ldrh	r3, [r3, #12]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da0c      	bge.n	80009c8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	3332      	adds	r3, #50	; 0x32
 80009b4:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <USART_Init+0x170>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	f003 0307 	and.w	r3, r3, #7
 80009c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c2:	4313      	orrs	r3, r2
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
 80009c6:	e00b      	b.n	80009e0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	3332      	adds	r3, #50	; 0x32
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <USART_Init+0x170>)
 80009d0:	fba2 2303 	umull	r2, r3, r2, r3
 80009d4:	095b      	lsrs	r3, r3, #5
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009dc:	4313      	orrs	r3, r2
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	811a      	strh	r2, [r3, #8]
}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40011400 	.word	0x40011400
 80009f8:	51eb851f 	.word	0x51eb851f

080009fc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	899b      	ldrh	r3, [r3, #12]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a1e:	e007      	b.n	8000a30 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	899b      	ldrh	r3, [r3, #12]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	819a      	strh	r2, [r3, #12]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	095b      	lsrs	r3, r3, #5
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	f003 031f 	and.w	r3, r3, #31
 8000a70:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000a72:	2201      	movs	r2, #1
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d103      	bne.n	8000a8a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	330c      	adds	r3, #12
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e009      	b.n	8000a9e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d103      	bne.n	8000a98 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3310      	adds	r3, #16
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e002      	b.n	8000a9e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3314      	adds	r3, #20
 8000a9c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000a9e:	787b      	ldrb	r3, [r7, #1]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	6811      	ldr	r1, [r2, #0]
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ab0:	e006      	b.n	8000ac0 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	6811      	ldr	r1, [r2, #0]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	43d2      	mvns	r2, r2
 8000abc:	400a      	ands	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	095b      	lsrs	r3, r3, #5
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000afa:	2201      	movs	r2, #1
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d107      	bne.n	8000b1a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	899b      	ldrh	r3, [r3, #12]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4013      	ands	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e011      	b.n	8000b3e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d107      	bne.n	8000b30 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	8a1b      	ldrh	r3, [r3, #16]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e006      	b.n	8000b3e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	8a9b      	ldrh	r3, [r3, #20]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000b46:	2201      	movs	r2, #1
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <USART_GetITStatus+0xa4>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	74fb      	strb	r3, [r7, #19]
 8000b6e:	e001      	b.n	8000b74 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000b74:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000b88:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <Audio_MAL_IRQHandler+0xec>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4610      	mov	r0, r2
 8000b94:	f7ff fc22 	bl	80003dc <DMA_GetFlagStatus>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d064      	beq.n	8000c68 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000b9e:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d04c      	beq.n	8000c40 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000ba6:	bf00      	nop
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fbfd 	bl	80003ac <DMA_GetCmdStatus>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f7      	bne.n	8000ba8 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <Audio_MAL_IRQHandler+0xec>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	f7ff fc46 	bl	8000454 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <Audio_MAL_IRQHandler+0xf4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <Audio_MAL_IRQHandler+0xf8>)
 8000bd0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	bf28      	it	cs
 8000bde:	4613      	movcs	r3, r2
 8000be0:	4a26      	ldr	r2, [pc, #152]	; (8000c7c <Audio_MAL_IRQHandler+0xf8>)
 8000be2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4924      	ldr	r1, [pc, #144]	; (8000c7c <Audio_MAL_IRQHandler+0xf8>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fb6a 	bl	80002c4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fbbc 	bl	8000374 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <Audio_MAL_IRQHandler+0xf4>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c08:	d203      	bcs.n	8000c12 <Audio_MAL_IRQHandler+0x8e>
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	e000      	b.n	8000c14 <Audio_MAL_IRQHandler+0x90>
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <Audio_MAL_IRQHandler+0xfc>)
 8000c14:	4413      	add	r3, r2
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <Audio_MAL_IRQHandler+0xf4>)
 8000c18:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c26:	428b      	cmp	r3, r1
 8000c28:	bf28      	it	cs
 8000c2a:	460b      	movcs	r3, r1
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <Audio_MAL_IRQHandler+0xf0>)
 8000c30:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2101      	movs	r1, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fb9b 	bl	8000374 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000c3e:	e013      	b.n	8000c68 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fb94 	bl	8000374 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <Audio_MAL_IRQHandler+0xe8>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <Audio_MAL_IRQHandler+0xec>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4610      	mov	r0, r2
 8000c58:	f7ff fbfc 	bl	8000454 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <Audio_MAL_IRQHandler+0xf4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f95e 	bl	8000f24 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000018 	.word	0x20000018
 8000c70:	2000001c 	.word	0x2000001c
 8000c74:	20000010 	.word	0x20000010
 8000c78:	20000048 	.word	0x20000048
 8000c7c:	20000088 	.word	0x20000088
 8000c80:	0001fffe 	.word	0x0001fffe

08000c84 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c88:	f7ff ff7c 	bl	8000b84 <Audio_MAL_IRQHandler>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c94:	f7ff ff76 	bl	8000b84 <Audio_MAL_IRQHandler>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <SPI3_IRQHandler+0x3c>)
 8000ca4:	f7ff fdd3 	bl	800084e <SPI_I2S_GetFlagStatus>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d011      	beq.n	8000cd2 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <SPI3_IRQHandler+0x40>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d106      	bne.n	8000cc4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000cb6:	f000 f940 	bl	8000f3a <EVAL_AUDIO_GetSampleCallBack>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2004      	movs	r0, #4
 8000cc0:	f7ff fae4 	bl	800028c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000cc4:	f000 f939 	bl	8000f3a <EVAL_AUDIO_GetSampleCallBack>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <SPI3_IRQHandler+0x3c>)
 8000cce:	f7ff fdaf 	bl	8000830 <SPI_I2S_SendData>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40003c00 	.word	0x40003c00
 8000cdc:	20000014 	.word	0x20000014

08000ce0 <main>:
pos ship = { .x=62, .y=34};
u_int8 ship_size = 5;
u_int8 PRNG = 43;		//Random value to start with

int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0aa      	sub	sp, #168	; 0xa8
 8000ce4:	af02      	add	r7, sp, #8
	/* Init com */
	serial_init(115200);
 8000ce6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000cea:	f000 f92f 	bl	8000f4c <serial_init>

	u_int8 play = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	state game = INIT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	while (play)
 8000cfa:	e0fd      	b.n	8000ef8 <main+0x218>
	{
		switch (game)
 8000cfc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	f200 80f9 	bhi.w	8000ef8 <main+0x218>
 8000d06:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <main+0x2c>)
 8000d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0c:	08000d25 	.word	0x08000d25
 8000d10:	08000dd1 	.word	0x08000dd1
 8000d14:	08000e13 	.word	0x08000e13
 8000d18:	08000e13 	.word	0x08000e13
 8000d1c:	08000eb5 	.word	0x08000eb5
 8000d20:	08000ebd 	.word	0x08000ebd
		{
		case INIT :

			/* Init border */
			vt100_clear_screen();
 8000d24:	f000 ff82 	bl	8001c2c <vt100_clear_screen>
			border_init ();
 8000d28:	f000 fa5e 	bl	80011e8 <border_init>

			/* Var Init */
			//	Init Ennemy fleet table
			pos ennemy_tab[30];
			for (u_int8 i=0; i<=29; i++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8000d32:	e016      	b.n	8000d62 <main+0x82>
			{
				ennemy_tab[i].x = 0;
 8000d34:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000d3e:	4413      	add	r3, r2
 8000d40:	2200      	movs	r2, #0
 8000d42:	f803 2ca0 	strb.w	r2, [r3, #-160]
				ennemy_tab[i].y = 0;
 8000d46:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000d50:	4413      	add	r3, r2
 8000d52:	2200      	movs	r2, #0
 8000d54:	f803 2c9f 	strb.w	r2, [r3, #-159]
			for (u_int8 i=0; i<=29; i++)
 8000d58:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8000d62:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8000d66:	2b1d      	cmp	r3, #29
 8000d68:	d9e4      	bls.n	8000d34 <main+0x54>
			}

			// Init shoot table
			shoot_pos shoot_tab[30];
			for (u_int8 i=0; i<=29; i++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8000d70:	e025      	b.n	8000dbe <main+0xde>
			{
				shoot_tab[i].x = 0;
 8000d72:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000d80:	4413      	add	r3, r2
 8000d82:	3b64      	subs	r3, #100	; 0x64
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
				shoot_tab[i].y = 0;
 8000d88:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000d96:	4413      	add	r3, r2
 8000d98:	3b63      	subs	r3, #99	; 0x63
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
				shoot_tab[i].who = shoot_ennemy;
 8000d9e:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000dac:	4413      	add	r3, r2
 8000dae:	3b62      	subs	r3, #98	; 0x62
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
			for (u_int8 i=0; i<=29; i++)
 8000db4:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000db8:	3301      	adds	r3, #1
 8000dba:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8000dbe:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000dc2:	2b1d      	cmp	r3, #29
 8000dc4:	d9d5      	bls.n	8000d72 <main+0x92>
			}

			// Serial reception init
			u_int8 serial_char = serial_get_last_char();
 8000dc6:	f000 f95d 	bl	8001084 <serial_get_last_char>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a

		case LOGO :
			// TODO make a beautiful logo
		{
			u_int8 a = '3';
 8000dd0:	2333      	movs	r3, #51	; 0x33
 8000dd2:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
			while (1)
			{
				delay (4500000);
 8000dd6:	484c      	ldr	r0, [pc, #304]	; (8000f08 <main+0x228>)
 8000dd8:	f000 fb4c 	bl	8001474 <delay>
				vt100_move(45, 15);
 8000ddc:	210f      	movs	r1, #15
 8000dde:	202d      	movs	r0, #45	; 0x2d
 8000de0:	f000 fea8 	bl	8001b34 <vt100_move>
				serial_putchar (a);
 8000de4:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f90b 	bl	8001004 <serial_putchar>
				if (a == '0')
 8000dee:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000df2:	2b30      	cmp	r3, #48	; 0x30
 8000df4:	d107      	bne.n	8000e06 <main+0x126>
				{
					vt100_move(45, 15);
 8000df6:	210f      	movs	r1, #15
 8000df8:	202d      	movs	r0, #45	; 0x2d
 8000dfa:	f000 fe9b 	bl	8001b34 <vt100_move>
					serial_putchar (' ');
 8000dfe:	2020      	movs	r0, #32
 8000e00:	f000 f900 	bl	8001004 <serial_putchar>
					break;
 8000e04:	e005      	b.n	8000e12 <main+0x132>
				}
				a--;
 8000e06:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
				delay (4500000);
 8000e10:	e7e1      	b.n	8000dd6 <main+0xf6>
			// if needs only

		case START :

			//Creating ship at initial position
			ship.x=62;
 8000e12:	4b3e      	ldr	r3, [pc, #248]	; (8000f0c <main+0x22c>)
 8000e14:	223e      	movs	r2, #62	; 0x3e
 8000e16:	701a      	strb	r2, [r3, #0]
			ship.y=34;
 8000e18:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <main+0x22c>)
 8000e1a:	2222      	movs	r2, #34	; 0x22
 8000e1c:	705a      	strb	r2, [r3, #1]
			vt100_move(ship.x,ship.y);
 8000e1e:	4b3b      	ldr	r3, [pc, #236]	; (8000f0c <main+0x22c>)
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <main+0x22c>)
 8000e24:	785b      	ldrb	r3, [r3, #1]
 8000e26:	4619      	mov	r1, r3
 8000e28:	4610      	mov	r0, r2
 8000e2a:	f000 fe83 	bl	8001b34 <vt100_move>
			serial_putship();
 8000e2e:	f000 f9d1 	bl	80011d4 <serial_putship>
			u_int8 alive = 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			u_int8 cd_shoot = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

			//Creating ennemy fleet
			u_int8 lenght_type1 = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			ennemy_type1 (ennemy_tab, &lenght_type1);
 8000e44:	f107 0297 	add.w	r2, r7, #151	; 0x97
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fa05 	bl	800125c <ennemy_type1>

			//Time before launch (with tIMER soon)
			delay(12000000);
 8000e52:	482f      	ldr	r0, [pc, #188]	; (8000f10 <main+0x230>)
 8000e54:	f000 fb0e 	bl	8001474 <delay>

		case WORKING :
			while (alive == 1)
 8000e58:	e02c      	b.n	8000eb4 <main+0x1d4>
			{
				// Ally moving
				move_ship (&ship, ship_size);
 8000e5a:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <main+0x234>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	482a      	ldr	r0, [pc, #168]	; (8000f0c <main+0x22c>)
 8000e62:	f000 f957 	bl	8001114 <move_ship>

				// Ennemy fleet moving
				ennemy_shooting (ennemy_tab, shoot_tab);
 8000e66:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fb16 	bl	80014a0 <ennemy_shooting>
				ennemy_moving (ennemy_tab);
 8000e74:	463b      	mov	r3, r7
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fd48 	bl	800190c <ennemy_moving>

				// Ship Shooting
				ally_shooting (&cd_shoot, shoot_tab);
 8000e7c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e84:	4611      	mov	r1, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fcce 	bl	8001828 <ally_shooting>

				// Something got hit ?
				hitbox (ennemy_tab, shoot_tab, &ship, lenght_type1, &alive);
 8000e8c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000e90:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000e94:	4638      	mov	r0, r7
 8000e96:	f107 0399 	add.w	r3, r7, #153	; 0x99
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <main+0x22c>)
 8000ea0:	f000 fba4 	bl	80015ec <hitbox>

				// Shoots moving
				move_shoots (shoot_tab);
 8000ea4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fa23 	bl	80012f4 <move_shoots>

				// TODO delay, between turns, randomly modifiable for now
				delay (2000000);
 8000eae:	481a      	ldr	r0, [pc, #104]	; (8000f18 <main+0x238>)
 8000eb0:	f000 fae0 	bl	8001474 <delay>
			while (alive == 1)
 8000eb4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d0ce      	beq.n	8000e5a <main+0x17a>
			}
		case END :
			vt100_clear_screen();
 8000ebc:	f000 feb6 	bl	8001c2c <vt100_clear_screen>
			vt100_move(65, 17);
 8000ec0:	2111      	movs	r1, #17
 8000ec2:	2041      	movs	r0, #65	; 0x41
 8000ec4:	f000 fe36 	bl	8001b34 <vt100_move>
			serial_puts ("You have been defeated ...");
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <main+0x23c>)
 8000eca:	f000 f8c5 	bl	8001058 <serial_puts>
			vt100_move(50, 30);
 8000ece:	211e      	movs	r1, #30
 8000ed0:	2032      	movs	r0, #50	; 0x32
 8000ed2:	f000 fe2f 	bl	8001b34 <vt100_move>
			serial_puts ("Do you want to retry ? n for no");
 8000ed6:	4812      	ldr	r0, [pc, #72]	; (8000f20 <main+0x240>)
 8000ed8:	f000 f8be 	bl	8001058 <serial_puts>
			serial_char = serial_get_last_char();
 8000edc:	f000 f8d2 	bl	8001084 <serial_get_last_char>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
			while (serial_char == -1);
 8000ee6:	bf00      	nop
			if (serial_char == 'n')
 8000ee8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8000eec:	2b6e      	cmp	r3, #110	; 0x6e
 8000eee:	d102      	bne.n	8000ef6 <main+0x216>
			{
				play = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
			else;
			break;
 8000ef6:	bf00      	nop
	while (play)
 8000ef8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f47f aefd 	bne.w	8000cfc <main+0x1c>
		}
	}
	vt100_clear_screen();
 8000f02:	f000 fe93 	bl	8001c2c <vt100_clear_screen>
	while (1);
 8000f06:	e7fe      	b.n	8000f06 <main+0x226>
 8000f08:	0044aa20 	.word	0x0044aa20
 8000f0c:	20000020 	.word	0x20000020
 8000f10:	00b71b00 	.word	0x00b71b00
 8000f14:	20000022 	.word	0x20000022
 8000f18:	001e8480 	.word	0x001e8480
 8000f1c:	08001cd0 	.word	0x08001cd0
 8000f20:	08001cec 	.word	0x08001cec

08000f24 <EVAL_AUDIO_TransferComplete_CallBack>:
}
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8000f2e:	bf00      	nop
}
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8000f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <serial_init>:

static unsigned char last_char_read = 1;
static char last_char;

void serial_init(uint32_t baudrate)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Use USART2 with PA2 and PA3 */

	/* Enable clock for GPIOA and USART */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000f54:	2101      	movs	r1, #1
 8000f56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f5a:	f7ff fc49 	bl	80007f0 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000f5e:	2101      	movs	r1, #1
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff fc25 	bl	80007b0 <RCC_AHB1PeriphClockCmd>

	/* Init GPIOA 2 and 3 as alternate functions */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000f66:	230c      	movs	r3, #12
 8000f68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	4619      	mov	r1, r3
 8000f88:	481c      	ldr	r0, [pc, #112]	; (8000ffc <serial_init+0xb0>)
 8000f8a:	f7ff fa91 	bl	80004b0 <GPIO_Init>

	/* Connect TX and RX pints to their alternate function pins */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000f8e:	2207      	movs	r2, #7
 8000f90:	2102      	movs	r1, #2
 8000f92:	481a      	ldr	r0, [pc, #104]	; (8000ffc <serial_init+0xb0>)
 8000f94:	f7ff fb1a 	bl	80005cc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000f98:	2207      	movs	r2, #7
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	4817      	ldr	r0, [pc, #92]	; (8000ffc <serial_init+0xb0>)
 8000f9e:	f7ff fb15 	bl	80005cc <GPIO_PinAFConfig>

	/* Configure USART parameters */
	USART_InitStruct.USART_BaudRate = baudrate;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8000faa:	230c      	movs	r3, #12
 8000fac:	837b      	strh	r3, [r7, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART2, &USART_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480f      	ldr	r0, [pc, #60]	; (8001000 <serial_init+0xb4>)
 8000fc2:	f7ff fc61 	bl	8000888 <USART_Init>

	/* Configure interruption */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f240 5125 	movw	r1, #1317	; 0x525
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <serial_init+0xb4>)
 8000fce:	f7ff fd35 	bl	8000a3c <USART_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000fd2:	2326      	movs	r3, #38	; 0x26
 8000fd4:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f8ee 	bl	80001c8 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 8000fec:	2101      	movs	r1, #1
 8000fee:	4804      	ldr	r0, [pc, #16]	; (8001000 <serial_init+0xb4>)
 8000ff0:	f7ff fd04 	bl	80009fc <USART_Cmd>
}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40004400 	.word	0x40004400

08001004 <serial_putchar>:

void serial_putchar(volatile char c)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	/* Check USART */
	if ((USART2->CR1 & USART_CR1_UE))
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <serial_putchar+0x50>)
 8001010:	899b      	ldrh	r3, [r3, #12]
 8001012:	b29b      	uxth	r3, r3
 8001014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d014      	beq.n	8001046 <serial_putchar+0x42>
	{
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 800101c:	bf00      	nop
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <serial_putchar+0x50>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f8      	beq.n	800101e <serial_putchar+0x1a>
			;
		/* Send data */
		USART2->DR = (uint16_t) (c & 0x01FF);
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <serial_putchar+0x50>)
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	b292      	uxth	r2, r2
 8001034:	809a      	strh	r2, [r3, #4]
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 8001036:	bf00      	nop
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <serial_putchar+0x50>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	b29b      	uxth	r3, r3
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f8      	beq.n	8001038 <serial_putchar+0x34>
			;
	}
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40004400 	.word	0x40004400

08001058 <serial_puts>:

void serial_puts(volatile char *s)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	while (*s)
 8001060:	e007      	b.n	8001072 <serial_puts+0x1a>
		serial_putchar(*s++);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ffc9 	bl	8001004 <serial_putchar>
	while (*s)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f2      	bne.n	8001062 <serial_puts+0xa>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <serial_get_last_char>:

signed char serial_get_last_char(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	if (last_char_read)
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <serial_get_last_char+0x28>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <serial_get_last_char+0x12>
		return -1;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	e005      	b.n	80010a2 <serial_get_last_char+0x1e>
	else
	{
		last_char_read = 1;
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <serial_get_last_char+0x28>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
		return last_char;
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <serial_get_last_char+0x2c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b25b      	sxtb	r3, r3
	}
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20000024 	.word	0x20000024
 80010b0:	20000044 	.word	0x20000044

080010b4 <serial_input_not_empty>:

/* interruption management */

static int32_t serial_input_not_empty(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	return USART_GetITStatus(USART2, USART_IT_RXNE);
 80010b8:	f240 5125 	movw	r1, #1317	; 0x525
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <serial_input_not_empty+0x14>)
 80010be:	f7ff fd05 	bl	8000acc <USART_GetITStatus>
 80010c2:	4603      	mov	r3, r0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40004400 	.word	0x40004400

080010cc <serial_input_character>:

static char serial_input_character(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	return USART2->DR;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <serial_input_character+0x18>)
 80010d2:	889b      	ldrh	r3, [r3, #4]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40004400 	.word	0x40004400

080010e8 <USART2_IRQHandler>:

#define serial_it_handler USART2_IRQHandler
void serial_it_handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	if (serial_input_not_empty())
 80010ec:	f7ff ffe2 	bl	80010b4 <serial_input_not_empty>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <USART2_IRQHandler+0x20>
	{
		last_char = serial_input_character();
 80010f6:	f7ff ffe9 	bl	80010cc <serial_input_character>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b03      	ldr	r3, [pc, #12]	; (800110c <USART2_IRQHandler+0x24>)
 8001100:	701a      	strb	r2, [r3, #0]
		last_char_read = 0;
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <USART2_IRQHandler+0x28>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
	}
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000044 	.word	0x20000044
 8001110:	20000024 	.word	0x20000024

08001114 <move_ship>:
#include <type_others.h>
#include <vt100.h>
#include <stdint.h>

void move_ship (pos *ship, u_int8 ship_size)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]

				switch (serial_get_last_char()) {
 8001120:	f7ff ffb0 	bl	8001084 <serial_get_last_char>
 8001124:	4603      	mov	r3, r0
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d002      	beq.n	8001130 <move_ship+0x1c>
 800112a:	2b71      	cmp	r3, #113	; 0x71
 800112c:	d025      	beq.n	800117a <move_ship+0x66>
						vt100_move(ship->x,ship->y);
						serial_putship ();
					}
					break;
				}
	return;
 800112e:	e04c      	b.n	80011ca <move_ship+0xb6>
					if (ship->x <= ( (VT100_SCREEN_XMAX-1) - ship_size*2))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	429a      	cmp	r2, r3
 8001140:	dc3f      	bgt.n	80011c2 <move_ship+0xae>
						vt100_move(ship->x,ship->y);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	781a      	ldrb	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	785b      	ldrb	r3, [r3, #1]
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f000 fcf1 	bl	8001b34 <vt100_move>
						serial_puts ("     ");
 8001152:	481f      	ldr	r0, [pc, #124]	; (80011d0 <move_ship+0xbc>)
 8001154:	f7ff ff80 	bl	8001058 <serial_puts>
						ship->x += 5;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3305      	adds	r3, #5
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	701a      	strb	r2, [r3, #0]
						vt100_move(ship->x,ship->y);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	785b      	ldrb	r3, [r3, #1]
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f000 fce0 	bl	8001b34 <vt100_move>
						serial_putship ();
 8001174:	f000 f82e 	bl	80011d4 <serial_putship>
					break;
 8001178:	e023      	b.n	80011c2 <move_ship+0xae>
					if (ship->x >= 1 + ship_size*2)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	3301      	adds	r3, #1
 8001186:	429a      	cmp	r2, r3
 8001188:	db1d      	blt.n	80011c6 <move_ship+0xb2>
						vt100_move(ship->x,ship->y);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	4619      	mov	r1, r3
 8001194:	4610      	mov	r0, r2
 8001196:	f000 fccd 	bl	8001b34 <vt100_move>
						serial_puts ("     ");
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <move_ship+0xbc>)
 800119c:	f7ff ff5c 	bl	8001058 <serial_puts>
						ship->x -= 5;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	3b05      	subs	r3, #5
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	701a      	strb	r2, [r3, #0]
						vt100_move(ship->x,ship->y);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4610      	mov	r0, r2
 80011b8:	f000 fcbc 	bl	8001b34 <vt100_move>
						serial_putship ();
 80011bc:	f000 f80a 	bl	80011d4 <serial_putship>
					break;
 80011c0:	e001      	b.n	80011c6 <move_ship+0xb2>
					break;
 80011c2:	bf00      	nop
 80011c4:	e000      	b.n	80011c8 <move_ship+0xb4>
					break;
 80011c6:	bf00      	nop
	return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	08001d0c 	.word	0x08001d0c

080011d4 <serial_putship>:

void serial_putship ()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	serial_puts("<-A->\0"); // actual ship
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <serial_putship+0x10>)
 80011da:	f7ff ff3d 	bl	8001058 <serial_puts>

	return;
 80011de:	bf00      	nop
}
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	08001d14 	.word	0x08001d14

080011e8 <border_init>:

	return;
}

void border_init ()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
	u_int8 i;

	for (i=(VT100_SCREEN_XMIN+1);i<=(VT100_SCREEN_XMAX-1);i++)
 80011ee:	2302      	movs	r3, #2
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e012      	b.n	800121a <border_init+0x32>
	{
		vt100_move(i,VT100_SCREEN_YMIN);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fc9b 	bl	8001b34 <vt100_move>
		serial_putchar('*');
 80011fe:	202a      	movs	r0, #42	; 0x2a
 8001200:	f7ff ff00 	bl	8001004 <serial_putchar>
		vt100_move(i,VT100_SCREEN_YMAX);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2123      	movs	r1, #35	; 0x23
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fc93 	bl	8001b34 <vt100_move>
		serial_putchar('*');
 800120e:	202a      	movs	r0, #42	; 0x2a
 8001210:	f7ff fef8 	bl	8001004 <serial_putchar>
	for (i=(VT100_SCREEN_XMIN+1);i<=(VT100_SCREEN_XMAX-1);i++)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3301      	adds	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b7c      	cmp	r3, #124	; 0x7c
 800121e:	d9e9      	bls.n	80011f4 <border_init+0xc>
	}

	for (i=(VT100_SCREEN_YMIN+1);i<=(VT100_SCREEN_YMAX-1);i++)
 8001220:	2302      	movs	r3, #2
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	e012      	b.n	800124c <border_init+0x64>
	{
		vt100_move(VT100_SCREEN_XMIN+1,i);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4619      	mov	r1, r3
 800122a:	2002      	movs	r0, #2
 800122c:	f000 fc82 	bl	8001b34 <vt100_move>
		serial_putchar('|');
 8001230:	207c      	movs	r0, #124	; 0x7c
 8001232:	f7ff fee7 	bl	8001004 <serial_putchar>
		vt100_move(VT100_SCREEN_XMAX-1,i);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4619      	mov	r1, r3
 800123a:	207c      	movs	r0, #124	; 0x7c
 800123c:	f000 fc7a 	bl	8001b34 <vt100_move>
		serial_putchar('|');
 8001240:	207c      	movs	r0, #124	; 0x7c
 8001242:	f7ff fedf 	bl	8001004 <serial_putchar>
	for (i=(VT100_SCREEN_YMIN+1);i<=(VT100_SCREEN_YMAX-1);i++)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	3301      	adds	r3, #1
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b22      	cmp	r3, #34	; 0x22
 8001250:	d9e9      	bls.n	8001226 <border_init+0x3e>
	}
	return;
 8001252:	bf00      	nop
}
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <ennemy_type1>:

void ennemy_type1 (pos *ennemy_tab, u_int8 *lenght_ship)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	u_int8 i;
	u_int8 distance_ship = 1;
 8001266:	2301      	movs	r3, #1
 8001268:	73bb      	strb	r3, [r7, #14]
	u_int8 number_ship = 9;
 800126a:	2309      	movs	r3, #9
 800126c:	737b      	strb	r3, [r7, #13]
	u_int8 init_x = 20;
 800126e:	2314      	movs	r3, #20
 8001270:	733b      	strb	r3, [r7, #12]
	u_int8 height = 5;
 8001272:	2305      	movs	r3, #5
 8001274:	72fb      	strb	r3, [r7, #11]
	*lenght_ship = 7;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2207      	movs	r2, #7
 800127a:	701a      	strb	r2, [r3, #0]

	for (i=0;i<number_ship;i++)
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e02d      	b.n	80012de <ennemy_type1+0x82>
	{
		vt100_move(init_x+(*lenght_ship+distance_ship)*i,height);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	4413      	add	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	fb12 f303 	smulbb	r3, r2, r3
 8001292:	b2da      	uxtb	r2, r3
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	7afa      	ldrb	r2, [r7, #11]
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fc48 	bl	8001b34 <vt100_move>
		serial_puts("\\-V+V-/");
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <ennemy_type1+0x94>)
 80012a6:	f7ff fed7 	bl	8001058 <serial_puts>
		ennemy_tab[i].x = init_x+(*lenght_ship+distance_ship)*i;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	7811      	ldrb	r1, [r2, #0]
 80012b6:	7bba      	ldrb	r2, [r7, #14]
 80012b8:	440a      	add	r2, r1
 80012ba:	b2d1      	uxtb	r1, r2
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	fb11 f202 	smulbb	r2, r1, r2
 80012c2:	b2d1      	uxtb	r1, r2
 80012c4:	7b3a      	ldrb	r2, [r7, #12]
 80012c6:	440a      	add	r2, r1
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]
		ennemy_tab[i].y = height;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	7afa      	ldrb	r2, [r7, #11]
 80012d6:	705a      	strb	r2, [r3, #1]
	for (i=0;i<number_ship;i++)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	7b7b      	ldrb	r3, [r7, #13]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d3cd      	bcc.n	8001282 <ennemy_type1+0x26>
	}
	return;
 80012e6:	bf00      	nop
}
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08001d20 	.word	0x08001d20

080012f4 <move_shoots>:

void move_shoots (shoot_pos *shoot_tab)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	u_int8 i = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]

	while (i <= 29)
 8001300:	e0ac      	b.n	800145c <move_shoots+0x168>
	{
		if ((shoot_tab[i].x != 0)||(shoot_tab[i].y != 0))
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <move_shoots+0x34>
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8097 	beq.w	8001456 <move_shoots+0x162>
		{
			vt100_move (shoot_tab[i].x,shoot_tab[i].y);
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	7818      	ldrb	r0, [r3, #0]
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	785b      	ldrb	r3, [r3, #1]
 8001344:	4619      	mov	r1, r3
 8001346:	f000 fbf5 	bl	8001b34 <vt100_move>
			serial_puts (" \n\b ");
 800134a:	4848      	ldr	r0, [pc, #288]	; (800146c <move_shoots+0x178>)
 800134c:	f7ff fe84 	bl	8001058 <serial_puts>
			//serial_shoot (shoot_tab, i);
			if (shoot_tab[i].who == shoot_ennemy)
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	789b      	ldrb	r3, [r3, #2]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d110      	bne.n	8001384 <move_shoots+0x90>
			{
				shoot_tab[i].y += 2;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	18d1      	adds	r1, r2, r3
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	3302      	adds	r3, #2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	704b      	strb	r3, [r1, #1]
 8001382:	e00f      	b.n	80013a4 <move_shoots+0xb0>
			}
			else
			{
				shoot_tab[i].y -= 2;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	18d1      	adds	r1, r2, r3
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	785b      	ldrb	r3, [r3, #1]
 800139e:	3b02      	subs	r3, #2
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	704b      	strb	r3, [r1, #1]
			}
			if ((shoot_tab[i].y == 34)&&(shoot_tab[i].who == shoot_ennemy))
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	785b      	ldrb	r3, [r3, #1]
 80013b2:	2b22      	cmp	r3, #34	; 0x22
 80013b4:	d119      	bne.n	80013ea <move_shoots+0xf6>
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	789b      	ldrb	r3, [r3, #2]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d110      	bne.n	80013ea <move_shoots+0xf6>
			{
				shoot_tab[i].x = 0;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
				shoot_tab[i].y = 0;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	2200      	movs	r2, #0
 80013e6:	705a      	strb	r2, [r3, #1]
 80013e8:	e021      	b.n	800142e <move_shoots+0x13a>
			}
			else if ((shoot_tab[i].y == 2)&&(shoot_tab[i].who == shoot_ally))
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	785b      	ldrb	r3, [r3, #1]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d118      	bne.n	800142e <move_shoots+0x13a>
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	789b      	ldrb	r3, [r3, #2]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10f      	bne.n	800142e <move_shoots+0x13a>
			{
				shoot_tab[i].x = 0;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
				shoot_tab[i].y = 0;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	2200      	movs	r2, #0
 800142c:	705a      	strb	r2, [r3, #1]
			}
			vt100_move (shoot_tab[i].x,shoot_tab[i].y);
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	7818      	ldrb	r0, [r3, #0]
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	785b      	ldrb	r3, [r3, #1]
 800144a:	4619      	mov	r1, r3
 800144c:	f000 fb72 	bl	8001b34 <vt100_move>
			serial_puts ("|\n\b|");
 8001450:	4807      	ldr	r0, [pc, #28]	; (8001470 <move_shoots+0x17c>)
 8001452:	f7ff fe01 	bl	8001058 <serial_puts>
		}
		i++;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	3301      	adds	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
	while (i <= 29)
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b1d      	cmp	r3, #29
 8001460:	f67f af4f 	bls.w	8001302 <move_shoots+0xe>
	}

	return;
 8001464:	bf00      	nop
}
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	08001d28 	.word	0x08001d28
 8001470:	08001d30 	.word	0x08001d30

08001474 <delay>:

void delay (unsigned long a)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	u_int32 i=0;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
	for (i=0; i< a; i++);
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e002      	b.n	800148c <delay+0x18>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3301      	adds	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3f8      	bcc.n	8001486 <delay+0x12>

	return;
 8001494:	bf00      	nop
}
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <ennemy_shooting>:



void ennemy_shooting (pos *ennemy_tab, shoot_pos *shoot_tab)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	u_int8 j = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
	for (u_int8 i = 0; i <= 29; i++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	73bb      	strb	r3, [r7, #14]
 80014b2:	e063      	b.n	800157c <ennemy_shooting+0xdc>
	{
		if ((ennemy_tab[i].x != 0)&&(ennemy_tab[i].y != 0))
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d059      	beq.n	8001576 <ennemy_shooting+0xd6>
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d052      	beq.n	8001576 <ennemy_shooting+0xd6>
		{
			if (Ps_RandomNumberGeneratory() <= 35)	// tir ?
 80014d0:	f000 f85e 	bl	8001590 <Ps_RandomNumberGeneratory>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b23      	cmp	r3, #35	; 0x23
 80014d8:	d84d      	bhi.n	8001576 <ennemy_shooting+0xd6>
			{
				while ((shoot_tab[j].x != 0)&&(shoot_tab[j].y != 0) )
 80014da:	e002      	b.n	80014e2 <ennemy_shooting+0x42>
				{
					j++;											//continue the tab until a clear address to stock the shoot
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	3301      	adds	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]
				while ((shoot_tab[j].x != 0)&&(shoot_tab[j].y != 0) )
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <ennemy_shooting+0x66>
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ea      	bne.n	80014dc <ennemy_shooting+0x3c>
				}
					shoot_tab[j].x = ennemy_tab[i].x+2;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	7bba      	ldrb	r2, [r7, #14]
 8001514:	0052      	lsls	r2, r2, #1
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	440a      	add	r2, r1
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	3202      	adds	r2, #2
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
					shoot_tab[j].y = ennemy_tab[i].y+1;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	4413      	add	r3, r2
 800152e:	7bba      	ldrb	r2, [r7, #14]
 8001530:	0052      	lsls	r2, r2, #1
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	440a      	add	r2, r1
 8001536:	7852      	ldrb	r2, [r2, #1]
 8001538:	3201      	adds	r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	705a      	strb	r2, [r3, #1]
					shoot_tab[j].who = shoot_ennemy;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	4413      	add	r3, r2
 800154a:	2200      	movs	r2, #0
 800154c:	709a      	strb	r2, [r3, #2]
					vt100_move (shoot_tab[j].x,shoot_tab[j].y);
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	7818      	ldrb	r0, [r3, #0]
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	785b      	ldrb	r3, [r3, #1]
 800156a:	4619      	mov	r1, r3
 800156c:	f000 fae2 	bl	8001b34 <vt100_move>
					serial_puts ("|\n\b|");
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <ennemy_shooting+0xec>)
 8001572:	f7ff fd71 	bl	8001058 <serial_puts>
	for (u_int8 i = 0; i <= 29; i++)
 8001576:	7bbb      	ldrb	r3, [r7, #14]
 8001578:	3301      	adds	r3, #1
 800157a:	73bb      	strb	r3, [r7, #14]
 800157c:	7bbb      	ldrb	r3, [r7, #14]
 800157e:	2b1d      	cmp	r3, #29
 8001580:	d998      	bls.n	80014b4 <ennemy_shooting+0x14>
			}
		}
	}

	return;
 8001582:	bf00      	nop
}
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	08001d30 	.word	0x08001d30

08001590 <Ps_RandomNumberGeneratory>:

u_int8 Ps_RandomNumberGeneratory ()
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	PRNG = ( ((((PRNG >> 3) & 0x01)^((PRNG >> 4) & 0x01)^((PRNG >> 5) & 0x01)^((PRNG >> 7) & 0x01)) <<7) | (PRNG >> 1) );
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <Ps_RandomNumberGeneratory+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	08db      	lsrs	r3, r3, #3
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <Ps_RandomNumberGeneratory+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4053      	eors	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <Ps_RandomNumberGeneratory+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	095b      	lsrs	r3, r3, #5
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4053      	eors	r3, r2
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <Ps_RandomNumberGeneratory+0x58>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	09db      	lsrs	r3, r3, #7
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4053      	eors	r3, r2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	01db      	lsls	r3, r3, #7
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <Ps_RandomNumberGeneratory+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <Ps_RandomNumberGeneratory+0x58>)
 80015d6:	701a      	strb	r2, [r3, #0]

	return PRNG;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <Ps_RandomNumberGeneratory+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000023 	.word	0x20000023

080015ec <hitbox>:

void hitbox (pos *ennemy_tab, shoot_pos *shoot_tab, pos *ship, u_int8 ennemy_lenght, u_int8 *alive )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	70fb      	strb	r3, [r7, #3]
	u_int8 ennemy_index;
	u_int8 shoot_index;

	for (shoot_index = 0; shoot_index <= 29; shoot_index++)	//can witn some time using car exist in struct
 80015fa:	2300      	movs	r3, #0
 80015fc:	75bb      	strb	r3, [r7, #22]
 80015fe:	e0fe      	b.n	80017fe <hitbox+0x212>
	{
		if (shoot_tab[shoot_index].who == shoot_ally)
 8001600:	7dba      	ldrb	r2, [r7, #22]
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	4413      	add	r3, r2
 800160c:	789b      	ldrb	r3, [r3, #2]
 800160e:	2b01      	cmp	r3, #1
 8001610:	f040 808e 	bne.w	8001730 <hitbox+0x144>
		{
			for (ennemy_index = 0; ennemy_index <= 29; ennemy_index++)	//can win some time with var ennemy total
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]
 8001618:	e085      	b.n	8001726 <hitbox+0x13a>
				{
					if (ennemy_tab[ennemy_index].y+1 == shoot_tab[shoot_index].y)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	785b      	ldrb	r3, [r3, #1]
 8001624:	1c59      	adds	r1, r3, #1
 8001626:	7dba      	ldrb	r2, [r7, #22]
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	4413      	add	r3, r2
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4299      	cmp	r1, r3
 8001636:	d173      	bne.n	8001720 <hitbox+0x134>
					{
						if ((shoot_tab[shoot_index].x >= ennemy_tab[ennemy_index].x)&&(shoot_tab[shoot_index].x <= ennemy_tab[ennemy_index].x+(ennemy_lenght-1)))
 8001638:	7dba      	ldrb	r2, [r7, #22]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	4413      	add	r3, r2
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	68f9      	ldr	r1, [r7, #12]
 800164c:	440b      	add	r3, r1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d365      	bcc.n	8001720 <hitbox+0x134>
 8001654:	7dba      	ldrb	r2, [r7, #22]
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	3b01      	subs	r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	4299      	cmp	r1, r3
 8001678:	dc52      	bgt.n	8001720 <hitbox+0x134>
						{
							vt100_move (ennemy_tab[ennemy_index].x,ennemy_tab[ennemy_index].y);
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4413      	add	r3, r2
 8001682:	7818      	ldrb	r0, [r3, #0]
 8001684:	7dfb      	ldrb	r3, [r7, #23]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	4619      	mov	r1, r3
 8001690:	f000 fa50 	bl	8001b34 <vt100_move>
							serial_puts ("XXXXXXX");
 8001694:	485e      	ldr	r0, [pc, #376]	; (8001810 <hitbox+0x224>)
 8001696:	f7ff fcdf 	bl	8001058 <serial_puts>
							delay (3000000);
 800169a:	485e      	ldr	r0, [pc, #376]	; (8001814 <hitbox+0x228>)
 800169c:	f7ff feea 	bl	8001474 <delay>
							vt100_move (ennemy_tab[ennemy_index].x,ennemy_tab[ennemy_index].y);
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	7818      	ldrb	r0, [r3, #0]
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f000 fa3d 	bl	8001b34 <vt100_move>
							serial_puts ("       ");
 80016ba:	4857      	ldr	r0, [pc, #348]	; (8001818 <hitbox+0x22c>)
 80016bc:	f7ff fccc 	bl	8001058 <serial_puts>
							vt100_move (shoot_tab[shoot_index].x, shoot_tab[shoot_index].y);
 80016c0:	7dba      	ldrb	r2, [r7, #22]
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	4413      	add	r3, r2
 80016cc:	7818      	ldrb	r0, [r3, #0]
 80016ce:	7dba      	ldrb	r2, [r7, #22]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	4413      	add	r3, r2
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	4619      	mov	r1, r3
 80016de:	f000 fa29 	bl	8001b34 <vt100_move>
							serial_puts (" \n\b ");
 80016e2:	484e      	ldr	r0, [pc, #312]	; (800181c <hitbox+0x230>)
 80016e4:	f7ff fcb8 	bl	8001058 <serial_puts>
		                	ennemy_tab[ennemy_index].x = 0;
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
		                	ennemy_tab[ennemy_index].y = 0;
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	2200      	movs	r2, #0
 80016fe:	705a      	strb	r2, [r3, #1]
		                	shoot_tab[shoot_index].x = 0;
 8001700:	7dba      	ldrb	r2, [r7, #22]
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	4413      	add	r3, r2
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
		                	shoot_tab[shoot_index].y = 0;
 8001710:	7dba      	ldrb	r2, [r7, #22]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	4413      	add	r3, r2
 800171c:	2200      	movs	r2, #0
 800171e:	705a      	strb	r2, [r3, #1]
			for (ennemy_index = 0; ennemy_index <= 29; ennemy_index++)	//can win some time with var ennemy total
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	3301      	adds	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	2b1d      	cmp	r3, #29
 800172a:	f67f af76 	bls.w	800161a <hitbox+0x2e>
 800172e:	e063      	b.n	80017f8 <hitbox+0x20c>
					}
				}
		}
		else
		{
			if (ship->y-2 == shoot_tab[shoot_index].y)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	785b      	ldrb	r3, [r3, #1]
 8001734:	1e99      	subs	r1, r3, #2
 8001736:	7dba      	ldrb	r2, [r7, #22]
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	4299      	cmp	r1, r3
 8001746:	d157      	bne.n	80017f8 <hitbox+0x20c>
			{
				if ((shoot_tab[shoot_index].x >= ship->x)&&(shoot_tab[shoot_index].x <= ship->x+(5-1)))
 8001748:	7dba      	ldrb	r2, [r7, #22]
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	4413      	add	r3, r2
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d34c      	bcc.n	80017f8 <hitbox+0x20c>
 800175e:	7dba      	ldrb	r2, [r7, #22]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4413      	add	r3, r2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3304      	adds	r3, #4
 8001774:	429a      	cmp	r2, r3
 8001776:	dc3f      	bgt.n	80017f8 <hitbox+0x20c>
				{
					vt100_move (ship->x,ship->y);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	4619      	mov	r1, r3
 8001782:	4610      	mov	r0, r2
 8001784:	f000 f9d6 	bl	8001b34 <vt100_move>
					serial_puts ("XXXXX");
 8001788:	4825      	ldr	r0, [pc, #148]	; (8001820 <hitbox+0x234>)
 800178a:	f7ff fc65 	bl	8001058 <serial_puts>
					delay (3000000);
 800178e:	4821      	ldr	r0, [pc, #132]	; (8001814 <hitbox+0x228>)
 8001790:	f7ff fe70 	bl	8001474 <delay>
					vt100_move (ship->x,ship->y);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	4619      	mov	r1, r3
 800179e:	4610      	mov	r0, r2
 80017a0:	f000 f9c8 	bl	8001b34 <vt100_move>
					serial_puts ("     ");
 80017a4:	481f      	ldr	r0, [pc, #124]	; (8001824 <hitbox+0x238>)
 80017a6:	f7ff fc57 	bl	8001058 <serial_puts>
					vt100_move (shoot_tab[shoot_index].x, shoot_tab[shoot_index].y);
 80017aa:	7dba      	ldrb	r2, [r7, #22]
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	4413      	add	r3, r2
 80017b6:	7818      	ldrb	r0, [r3, #0]
 80017b8:	7dba      	ldrb	r2, [r7, #22]
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	785b      	ldrb	r3, [r3, #1]
 80017c6:	4619      	mov	r1, r3
 80017c8:	f000 f9b4 	bl	8001b34 <vt100_move>
					serial_puts (" \n\b ");
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <hitbox+0x230>)
 80017ce:	f7ff fc43 	bl	8001058 <serial_puts>
					shoot_tab[shoot_index].x = 0;
 80017d2:	7dba      	ldrb	r2, [r7, #22]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	4413      	add	r3, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
					shoot_tab[shoot_index].y = 0;
 80017e2:	7dba      	ldrb	r2, [r7, #22]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	4413      	add	r3, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	705a      	strb	r2, [r3, #1]
					// Defeat
					*alive = 0;
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
	for (shoot_index = 0; shoot_index <= 29; shoot_index++)	//can witn some time using car exist in struct
 80017f8:	7dbb      	ldrb	r3, [r7, #22]
 80017fa:	3301      	adds	r3, #1
 80017fc:	75bb      	strb	r3, [r7, #22]
 80017fe:	7dbb      	ldrb	r3, [r7, #22]
 8001800:	2b1d      	cmp	r3, #29
 8001802:	f67f aefd 	bls.w	8001600 <hitbox+0x14>
				}
			}
		}
	}
	return;
 8001806:	bf00      	nop
}
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	08001d38 	.word	0x08001d38
 8001814:	002dc6c0 	.word	0x002dc6c0
 8001818:	08001d40 	.word	0x08001d40
 800181c:	08001d28 	.word	0x08001d28
 8001820:	08001d48 	.word	0x08001d48
 8001824:	08001d0c 	.word	0x08001d0c

08001828 <ally_shooting>:

void ally_shooting (u_int8 *cd_shoot,shoot_pos *shoot_tab )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	u_int8 j = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
	*cd_shoot += 1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	701a      	strb	r2, [r3, #0]
	*cd_shoot %=  5;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <ally_shooting+0xd8>)
 8001848:	fba3 1302 	umull	r1, r3, r3, r2
 800184c:	0899      	lsrs	r1, r3, #2
 800184e:	460b      	mov	r3, r1
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	b2da      	uxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	701a      	strb	r2, [r3, #0]
	if (*cd_shoot == 1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d148      	bne.n	80018f6 <ally_shooting+0xce>
	{
		while ((shoot_tab[j].x != 0)&&(shoot_tab[j].y != 0) )
 8001864:	e002      	b.n	800186c <ally_shooting+0x44>
		{
			j++;											//continue the tab until a clear adress to stock the shoot
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	3301      	adds	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
		while ((shoot_tab[j].x != 0)&&(shoot_tab[j].y != 0) )
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <ally_shooting+0x68>
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	785b      	ldrb	r3, [r3, #1]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ea      	bne.n	8001866 <ally_shooting+0x3e>
		}
		shoot_tab[j].x = ship.x+2;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <ally_shooting+0xdc>)
 800189e:	7812      	ldrb	r2, [r2, #0]
 80018a0:	3202      	adds	r2, #2
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]
		shoot_tab[j].y = ship.y-2;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <ally_shooting+0xdc>)
 80018b4:	7852      	ldrb	r2, [r2, #1]
 80018b6:	3a02      	subs	r2, #2
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	705a      	strb	r2, [r3, #1]
		shoot_tab[j].who = shoot_ally;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	2201      	movs	r2, #1
 80018ca:	709a      	strb	r2, [r3, #2]
		vt100_move (shoot_tab[j].x,shoot_tab[j].y);
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	7818      	ldrb	r0, [r3, #0]
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	785b      	ldrb	r3, [r3, #1]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f000 f923 	bl	8001b34 <vt100_move>
		serial_puts ("|\n\b|");
 80018ee:	4806      	ldr	r0, [pc, #24]	; (8001908 <ally_shooting+0xe0>)
 80018f0:	f7ff fbb2 	bl	8001058 <serial_puts>
	}
	return;
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
}
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	cccccccd 	.word	0xcccccccd
 8001904:	20000020 	.word	0x20000020
 8001908:	08001d30 	.word	0x08001d30

0800190c <ennemy_moving>:

void ennemy_moving (pos *ennemy_tab)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

	return;
 8001914:	bf00      	nop
}
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001924:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001926:	e003      	b.n	8001930 <LoopCopyDataInit>

08001928 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800192a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800192c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800192e:	3104      	adds	r1, #4

08001930 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001934:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001936:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001938:	d3f6      	bcc.n	8001928 <CopyDataInit>
  ldr  r2, =_sbss
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800193c:	e002      	b.n	8001944 <LoopFillZerobss>

0800193e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800193e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001940:	f842 3b04 	str.w	r3, [r2], #4

08001944 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001946:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001948:	d3f9      	bcc.n	800193e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800194a:	f000 f841 	bl	80019d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194e:	f000 f98f 	bl	8001c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff f9c5 	bl	8000ce0 <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001958:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800195c:	08001d58 	.word	0x08001d58
  ldr  r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001964:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8001968:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 800196c:	200000c4 	.word	0x200000c4

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>

08001972 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001984:	e7fe      	b.n	8001984 <HardFault_Handler+0x4>

08001986 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800198a:	e7fe      	b.n	800198a <MemManage_Handler+0x4>

0800198c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001990:	e7fe      	b.n	8001990 <BusFault_Handler+0x4>

08001992 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001996:	e7fe      	b.n	8001996 <UsageFault_Handler+0x4>

08001998 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <SystemInit+0x60>)
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <SystemInit+0x60>)
 80019d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019e4:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <SystemInit+0x64>)
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <SystemInit+0x64>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019f0:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <SystemInit+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <SystemInit+0x64>)
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <SystemInit+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <SystemInit+0x64>)
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <SystemInit+0x68>)
 8001a0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <SystemInit+0x64>)
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <SystemInit+0x64>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <SystemInit+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001a1e:	f000 f80d 	bl	8001a3c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a22:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <SystemInit+0x60>)
 8001a24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a28:	609a      	str	r2, [r3, #8]
#endif
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00
 8001a34:	40023800 	.word	0x40023800
 8001a38:	24003010 	.word	0x24003010

08001a3c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001a4a:	4a36      	ldr	r2, [pc, #216]	; (8001b24 <SetSysClock+0xe8>)
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <SetSysClock+0xe8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001a56:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <SetSysClock+0xe8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3301      	adds	r3, #1
 8001a64:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d103      	bne.n	8001a74 <SetSysClock+0x38>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a72:	d1f0      	bne.n	8001a56 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <SetSysClock+0xe8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001a80:	2301      	movs	r3, #1
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	e001      	b.n	8001a8a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d142      	bne.n	8001b16 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001a90:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <SetSysClock+0xe8>)
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <SetSysClock+0xe8>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001a9c:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <SetSysClock+0xec>)
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <SetSysClock+0xec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aa6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001aa8:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <SetSysClock+0xe8>)
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <SetSysClock+0xe8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <SetSysClock+0xe8>)
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <SetSysClock+0xe8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aba:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <SetSysClock+0xe8>)
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <SetSysClock+0xe8>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001ac6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <SetSysClock+0xe8>)
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <SetSysClock+0xf0>)
 8001acc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <SetSysClock+0xe8>)
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <SetSysClock+0xe8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001ada:	bf00      	nop
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <SetSysClock+0xe8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f9      	beq.n	8001adc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <SetSysClock+0xf4>)
 8001aea:	f240 6205 	movw	r2, #1541	; 0x605
 8001aee:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <SetSysClock+0xe8>)
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <SetSysClock+0xe8>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001afc:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <SetSysClock+0xe8>)
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <SetSysClock+0xe8>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001b08:	bf00      	nop
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <SetSysClock+0xe8>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d1f9      	bne.n	8001b0a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	07405408 	.word	0x07405408
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <vt100_move>:
#include "vt100.h"
#include "serial.h"

void vt100_move(uint8_t x, uint8_t y)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
	serial_putchar(VT100_ESC);
 8001b44:	201b      	movs	r0, #27
 8001b46:	f7ff fa5d 	bl	8001004 <serial_putchar>
	serial_putchar('[');
 8001b4a:	205b      	movs	r0, #91	; 0x5b
 8001b4c:	f7ff fa5a 	bl	8001004 <serial_putchar>
	serial_putchar('0' + (y / 100));
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	4a34      	ldr	r2, [pc, #208]	; (8001c24 <vt100_move+0xf0>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	3330      	adds	r3, #48	; 0x30
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fa4f 	bl	8001004 <serial_putchar>
	serial_putchar('0' + ((y / 10) % 10));
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	4a2f      	ldr	r2, [pc, #188]	; (8001c28 <vt100_move+0xf4>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <vt100_move+0xf4>)
 8001b74:	fba3 1302 	umull	r1, r3, r3, r2
 8001b78:	08d9      	lsrs	r1, r3, #3
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3330      	adds	r3, #48	; 0x30
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fa3a 	bl	8001004 <serial_putchar>
	serial_putchar('0' + (y % 10));
 8001b90:	79ba      	ldrb	r2, [r7, #6]
 8001b92:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <vt100_move+0xf4>)
 8001b94:	fba3 1302 	umull	r1, r3, r3, r2
 8001b98:	08d9      	lsrs	r1, r3, #3
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3330      	adds	r3, #48	; 0x30
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fa2a 	bl	8001004 <serial_putchar>
	serial_putchar(';');
 8001bb0:	203b      	movs	r0, #59	; 0x3b
 8001bb2:	f7ff fa27 	bl	8001004 <serial_putchar>
	serial_putchar('0' + (x / 100));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <vt100_move+0xf0>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3330      	adds	r3, #48	; 0x30
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fa1c 	bl	8001004 <serial_putchar>
	serial_putchar('0' + ((x / 10) % 10));
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <vt100_move+0xf4>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <vt100_move+0xf4>)
 8001bda:	fba3 1302 	umull	r1, r3, r3, r2
 8001bde:	08d9      	lsrs	r1, r3, #3
 8001be0:	460b      	mov	r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3330      	adds	r3, #48	; 0x30
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fa07 	bl	8001004 <serial_putchar>
	serial_putchar('0' + (x % 10));
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <vt100_move+0xf4>)
 8001bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8001bfe:	08d9      	lsrs	r1, r3, #3
 8001c00:	460b      	mov	r3, r1
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3330      	adds	r3, #48	; 0x30
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f9f7 	bl	8001004 <serial_putchar>
	serial_putchar('H');
 8001c16:	2048      	movs	r0, #72	; 0x48
 8001c18:	f7ff f9f4 	bl	8001004 <serial_putchar>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	51eb851f 	.word	0x51eb851f
 8001c28:	cccccccd 	.word	0xcccccccd

08001c2c <vt100_clear_screen>:

void vt100_clear_screen(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	serial_putchar(VT100_ESC);
 8001c30:	201b      	movs	r0, #27
 8001c32:	f7ff f9e7 	bl	8001004 <serial_putchar>
	serial_putchar('[');
 8001c36:	205b      	movs	r0, #91	; 0x5b
 8001c38:	f7ff f9e4 	bl	8001004 <serial_putchar>
	serial_putchar('2');
 8001c3c:	2032      	movs	r0, #50	; 0x32
 8001c3e:	f7ff f9e1 	bl	8001004 <serial_putchar>
	serial_putchar('J');
 8001c42:	204a      	movs	r0, #74	; 0x4a
 8001c44:	f7ff f9de 	bl	8001004 <serial_putchar>
	serial_putchar(VT100_ESC);
 8001c48:	201b      	movs	r0, #27
 8001c4a:	f7ff f9db 	bl	8001004 <serial_putchar>
	serial_putchar('[');
 8001c4e:	205b      	movs	r0, #91	; 0x5b
 8001c50:	f7ff f9d8 	bl	8001004 <serial_putchar>
	serial_putchar('?');
 8001c54:	203f      	movs	r0, #63	; 0x3f
 8001c56:	f7ff f9d5 	bl	8001004 <serial_putchar>
	serial_putchar('2');
 8001c5a:	2032      	movs	r0, #50	; 0x32
 8001c5c:	f7ff f9d2 	bl	8001004 <serial_putchar>
	serial_putchar('5');
 8001c60:	2035      	movs	r0, #53	; 0x35
 8001c62:	f7ff f9cf 	bl	8001004 <serial_putchar>
	serial_putchar('l');
 8001c66:	206c      	movs	r0, #108	; 0x6c
 8001c68:	f7ff f9cc 	bl	8001004 <serial_putchar>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <__libc_init_array>:
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	4e0d      	ldr	r6, [pc, #52]	; (8001ca8 <__libc_init_array+0x38>)
 8001c74:	4c0d      	ldr	r4, [pc, #52]	; (8001cac <__libc_init_array+0x3c>)
 8001c76:	1ba4      	subs	r4, r4, r6
 8001c78:	10a4      	asrs	r4, r4, #2
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	42a5      	cmp	r5, r4
 8001c7e:	d109      	bne.n	8001c94 <__libc_init_array+0x24>
 8001c80:	4e0b      	ldr	r6, [pc, #44]	; (8001cb0 <__libc_init_array+0x40>)
 8001c82:	4c0c      	ldr	r4, [pc, #48]	; (8001cb4 <__libc_init_array+0x44>)
 8001c84:	f000 f818 	bl	8001cb8 <_init>
 8001c88:	1ba4      	subs	r4, r4, r6
 8001c8a:	10a4      	asrs	r4, r4, #2
 8001c8c:	2500      	movs	r5, #0
 8001c8e:	42a5      	cmp	r5, r4
 8001c90:	d105      	bne.n	8001c9e <__libc_init_array+0x2e>
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
 8001c94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c98:	4798      	blx	r3
 8001c9a:	3501      	adds	r5, #1
 8001c9c:	e7ee      	b.n	8001c7c <__libc_init_array+0xc>
 8001c9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ca2:	4798      	blx	r3
 8001ca4:	3501      	adds	r5, #1
 8001ca6:	e7f2      	b.n	8001c8e <__libc_init_array+0x1e>
 8001ca8:	08001d50 	.word	0x08001d50
 8001cac:	08001d50 	.word	0x08001d50
 8001cb0:	08001d50 	.word	0x08001d50
 8001cb4:	08001d54 	.word	0x08001d54

08001cb8 <_init>:
 8001cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cba:	bf00      	nop
 8001cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cbe:	bc08      	pop	{r3}
 8001cc0:	469e      	mov	lr, r3
 8001cc2:	4770      	bx	lr

08001cc4 <_fini>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	bf00      	nop
 8001cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cca:	bc08      	pop	{r3}
 8001ccc:	469e      	mov	lr, r3
 8001cce:	4770      	bx	lr
